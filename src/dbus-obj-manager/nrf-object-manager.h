/*
 * Generated by gdbus-codegen 2.48.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __NRF_OBJECT_MANAGER_H__
#define __NRF_OBJECT_MANAGER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.cesar.nrf.Adapter1 */

#define TYPE_ADAPTER1 (adapter1_get_type ())
#define ADAPTER1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ADAPTER1, Adapter1))
#define IS_ADAPTER1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ADAPTER1))
#define ADAPTER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ADAPTER1, Adapter1Iface))

struct _Adapter1;
typedef struct _Adapter1 Adapter1;
typedef struct _Adapter1Iface Adapter1Iface;

struct _Adapter1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_add_device) (
    Adapter1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_properties);

  gboolean (*handle_remove_device) (
    Adapter1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_object);

  const gchar * (*get_address) (Adapter1 *object);

  gboolean  (*get_powered) (Adapter1 *object);

  gboolean  (*get_scan) (Adapter1 *object);

};

GType adapter1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *adapter1_interface_info (void);
guint adapter1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void adapter1_complete_add_device (
    Adapter1 *object,
    GDBusMethodInvocation *invocation);

void adapter1_complete_remove_device (
    Adapter1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void adapter1_call_add_device (
    Adapter1 *proxy,
    GVariant *arg_properties,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean adapter1_call_add_device_finish (
    Adapter1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean adapter1_call_add_device_sync (
    Adapter1 *proxy,
    GVariant *arg_properties,
    GCancellable *cancellable,
    GError **error);

void adapter1_call_remove_device (
    Adapter1 *proxy,
    const gchar *arg_object,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean adapter1_call_remove_device_finish (
    Adapter1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean adapter1_call_remove_device_sync (
    Adapter1 *proxy,
    const gchar *arg_object,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *adapter1_get_address (Adapter1 *object);
gchar *adapter1_dup_address (Adapter1 *object);
void adapter1_set_address (Adapter1 *object, const gchar *value);

gboolean adapter1_get_powered (Adapter1 *object);
void adapter1_set_powered (Adapter1 *object, gboolean value);

gboolean adapter1_get_scan (Adapter1 *object);
void adapter1_set_scan (Adapter1 *object, gboolean value);


/* ---- */

#define TYPE_ADAPTER1_PROXY (adapter1_proxy_get_type ())
#define ADAPTER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ADAPTER1_PROXY, Adapter1Proxy))
#define ADAPTER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ADAPTER1_PROXY, Adapter1ProxyClass))
#define ADAPTER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ADAPTER1_PROXY, Adapter1ProxyClass))
#define IS_ADAPTER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ADAPTER1_PROXY))
#define IS_ADAPTER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ADAPTER1_PROXY))

typedef struct _Adapter1Proxy Adapter1Proxy;
typedef struct _Adapter1ProxyClass Adapter1ProxyClass;
typedef struct _Adapter1ProxyPrivate Adapter1ProxyPrivate;

struct _Adapter1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  Adapter1ProxyPrivate *priv;
};

struct _Adapter1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType adapter1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Adapter1Proxy, g_object_unref)
#endif

void adapter1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Adapter1 *adapter1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Adapter1 *adapter1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void adapter1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Adapter1 *adapter1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Adapter1 *adapter1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ADAPTER1_SKELETON (adapter1_skeleton_get_type ())
#define ADAPTER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ADAPTER1_SKELETON, Adapter1Skeleton))
#define ADAPTER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ADAPTER1_SKELETON, Adapter1SkeletonClass))
#define ADAPTER1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ADAPTER1_SKELETON, Adapter1SkeletonClass))
#define IS_ADAPTER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ADAPTER1_SKELETON))
#define IS_ADAPTER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ADAPTER1_SKELETON))

typedef struct _Adapter1Skeleton Adapter1Skeleton;
typedef struct _Adapter1SkeletonClass Adapter1SkeletonClass;
typedef struct _Adapter1SkeletonPrivate Adapter1SkeletonPrivate;

struct _Adapter1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  Adapter1SkeletonPrivate *priv;
};

struct _Adapter1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType adapter1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Adapter1Skeleton, g_object_unref)
#endif

Adapter1 *adapter1_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.cesar.nrf.Device1 */

#define TYPE_DEVICE1 (device1_get_type ())
#define DEVICE1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DEVICE1, Device1))
#define IS_DEVICE1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DEVICE1))
#define DEVICE1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_DEVICE1, Device1Iface))

struct _Device1;
typedef struct _Device1 Device1;
typedef struct _Device1Iface Device1Iface;

struct _Device1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_bind) (
    Device1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_publickey);

  const gchar * (*get_adapter) (Device1 *object);

  const gchar * (*get_address) (Device1 *object);

  gboolean  (*get_allowed) (Device1 *object);

  gboolean  (*get_broadcasting) (Device1 *object);

  gboolean  (*get_connected) (Device1 *object);

  const gchar * (*get_name) (Device1 *object);

  const gchar * (*get_publickey) (Device1 *object);

};

GType device1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *device1_interface_info (void);
guint device1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void device1_complete_bind (
    Device1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void device1_call_bind (
    Device1 *proxy,
    const gchar *arg_publickey,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device1_call_bind_finish (
    Device1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device1_call_bind_sync (
    Device1 *proxy,
    const gchar *arg_publickey,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *device1_get_address (Device1 *object);
gchar *device1_dup_address (Device1 *object);
void device1_set_address (Device1 *object, const gchar *value);

const gchar *device1_get_name (Device1 *object);
gchar *device1_dup_name (Device1 *object);
void device1_set_name (Device1 *object, const gchar *value);

const gchar *device1_get_publickey (Device1 *object);
gchar *device1_dup_publickey (Device1 *object);
void device1_set_publickey (Device1 *object, const gchar *value);

gboolean device1_get_allowed (Device1 *object);
void device1_set_allowed (Device1 *object, gboolean value);

gboolean device1_get_connected (Device1 *object);
void device1_set_connected (Device1 *object, gboolean value);

gboolean device1_get_broadcasting (Device1 *object);
void device1_set_broadcasting (Device1 *object, gboolean value);

const gchar *device1_get_adapter (Device1 *object);
gchar *device1_dup_adapter (Device1 *object);
void device1_set_adapter (Device1 *object, const gchar *value);


/* ---- */

#define TYPE_DEVICE1_PROXY (device1_proxy_get_type ())
#define DEVICE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DEVICE1_PROXY, Device1Proxy))
#define DEVICE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DEVICE1_PROXY, Device1ProxyClass))
#define DEVICE1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DEVICE1_PROXY, Device1ProxyClass))
#define IS_DEVICE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DEVICE1_PROXY))
#define IS_DEVICE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DEVICE1_PROXY))

typedef struct _Device1Proxy Device1Proxy;
typedef struct _Device1ProxyClass Device1ProxyClass;
typedef struct _Device1ProxyPrivate Device1ProxyPrivate;

struct _Device1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  Device1ProxyPrivate *priv;
};

struct _Device1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType device1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Device1Proxy, g_object_unref)
#endif

void device1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Device1 *device1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Device1 *device1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void device1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Device1 *device1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Device1 *device1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_DEVICE1_SKELETON (device1_skeleton_get_type ())
#define DEVICE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DEVICE1_SKELETON, Device1Skeleton))
#define DEVICE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DEVICE1_SKELETON, Device1SkeletonClass))
#define DEVICE1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DEVICE1_SKELETON, Device1SkeletonClass))
#define IS_DEVICE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DEVICE1_SKELETON))
#define IS_DEVICE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DEVICE1_SKELETON))

typedef struct _Device1Skeleton Device1Skeleton;
typedef struct _Device1SkeletonClass Device1SkeletonClass;
typedef struct _Device1SkeletonPrivate Device1SkeletonPrivate;

struct _Device1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  Device1SkeletonPrivate *priv;
};

struct _Device1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType device1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (Device1Skeleton, g_object_unref)
#endif

Device1 *device1_skeleton_new (void);


/* ---- */

#define TYPE_OBJECT (object_get_type ())
#define OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT, Object))
#define IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT))
#define OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_OBJECT, Object))

struct _Object;
typedef struct _Object Object;
typedef struct _ObjectIface ObjectIface;

struct _ObjectIface
{
  GTypeInterface parent_iface;
};

GType object_get_type (void) G_GNUC_CONST;

Adapter1 *object_get_adapter1 (Object *object);
Device1 *object_get_device1 (Object *object);
Adapter1 *object_peek_adapter1 (Object *object);
Device1 *object_peek_device1 (Object *object);

#define TYPE_OBJECT_PROXY (object_proxy_get_type ())
#define OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_PROXY, ObjectProxy))
#define OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_PROXY, ObjectProxyClass))
#define OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_PROXY, ObjectProxyClass))
#define IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_PROXY))
#define IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_PROXY))

typedef struct _ObjectProxy ObjectProxy;
typedef struct _ObjectProxyClass ObjectProxyClass;
typedef struct _ObjectProxyPrivate ObjectProxyPrivate;

struct _ObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  ObjectProxyPrivate *priv;
};

struct _ObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectProxy, g_object_unref)
#endif

ObjectProxy *object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define TYPE_OBJECT_SKELETON (object_skeleton_get_type ())
#define OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_SKELETON, ObjectSkeleton))
#define OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_SKELETON, ObjectSkeletonClass))
#define OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_SKELETON, ObjectSkeletonClass))
#define IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_SKELETON))
#define IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_SKELETON))

typedef struct _ObjectSkeleton ObjectSkeleton;
typedef struct _ObjectSkeletonClass ObjectSkeletonClass;
typedef struct _ObjectSkeletonPrivate ObjectSkeletonPrivate;

struct _ObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  ObjectSkeletonPrivate *priv;
};

struct _ObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectSkeleton, g_object_unref)
#endif

ObjectSkeleton *object_skeleton_new (const gchar *object_path);
void object_skeleton_set_adapter1 (ObjectSkeleton *object, Adapter1 *interface_);
void object_skeleton_set_device1 (ObjectSkeleton *object, Device1 *interface_);

/* ---- */

#define TYPE_OBJECT_MANAGER_CLIENT (object_manager_client_get_type ())
#define OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClient))
#define OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClientClass))
#define OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClientClass))
#define IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_MANAGER_CLIENT))
#define IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _ObjectManagerClient ObjectManagerClient;
typedef struct _ObjectManagerClientClass ObjectManagerClientClass;
typedef struct _ObjectManagerClientPrivate ObjectManagerClientPrivate;

struct _ObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  ObjectManagerClientPrivate *priv;
};

struct _ObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectManagerClient, g_object_unref)
#endif

GType object_manager_client_get_type (void) G_GNUC_CONST;

GType object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __NRF_OBJECT_MANAGER_H__ */
